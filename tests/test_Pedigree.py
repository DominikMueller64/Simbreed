# -*- coding: utf-8 -*-
"""
Created on Sun Aug 21 14:41:14 2016

@author: dominik
"""
from .context import pytest
from .context import simbreed

import numpy as np


# Mrode2
@pytest.fixture
def Mrode2():
    ID = [1, 2, 3, 4, 5, 6]
    father = ['NA', 'NA', 1, 1, 4, 5]
    mother = ['NA', 'NA', 2, 'NA', 3, 2]
    pop = simbreed.pedPop.fromPedigree(ID=ID, father=father, mother=mother)
    return pop

def test_tabular_Mrode2(Mrode2):
    truth = np.array([[ 1.    ,  0.    ,  0.5   ,  0.5   ,  0.5   ,  0.25  ],
                      [ 0.    ,  1.    ,  0.5   ,  0.    ,  0.25  ,  0.625 ],
                      [ 0.5   ,  0.5   ,  1.    ,  0.25  ,  0.625 ,  0.5625],
                      [ 0.5   ,  0.    ,  0.25  ,  1.    ,  0.625 ,  0.3125],
                      [ 0.5   ,  0.25  ,  0.625 ,  0.625 ,  1.125 ,  0.6875],
                      [ 0.25  ,  0.625 ,  0.5625,  0.3125,  0.6875,  1.125 ]])
    A = Mrode2.makeA().matrix
    assert np.allclose(truth, A)

def test_LDL_Mrode2(Mrode2):
    truth = np.array([[ 1.    ,  0.    ,  0.5   ,  0.5   ,  0.5   ,  0.25  ],
                      [ 0.    ,  1.    ,  0.5   ,  0.    ,  0.25  ,  0.625 ],
                      [ 0.5   ,  0.5   ,  1.    ,  0.25  ,  0.625 ,  0.5625],
                      [ 0.5   ,  0.    ,  0.25  ,  1.    ,  0.625 ,  0.3125],
                      [ 0.5   ,  0.25  ,  0.625 ,  0.625 ,  1.125 ,  0.6875],
                      [ 0.25  ,  0.625 ,  0.5625,  0.3125,  0.6875,  1.125 ]])
    A = Mrode2.makeA(method = "LDL").matrix
    assert np.allclose(truth, A)


ID = [1, 2, 3, 4, 5, 6]
father = ['NA', 'NA', 1, 1, 4, 5]
mother = ['NA', 'NA', 2, 'NA', 3, 5]
#mother = ['NA', 'NA', 2, 3, 3, 2]
pop = pedPop.fromPedigree(ID=ID, father=father, mother=mother)

numChrom = 1
chromLengths = [100.0] * numChrom
cS = CrossoverSimulator(m = 10, p = 0.5, obligateChiasma = False)

pop = skPop.fromPedPop(population=pop, chromLengths=chromLengths,
                                crossoverSimulator=cS)

ID = 2
IDb = 6


pop.expGeneContr(ID=(1,2), IDb=(1,2,3,4,5,6)).matrix.T
print(pop.realFounderGeneContrMatrix(ID=6).matrix)
print(pop.realGeneContr(ID=(1,2), IDb=6).matrix.T)



pop = pedPop()
pop.createFounders(2)
for _ in range(5): pop.randomMating(size=3)
cS = CrossoverSimulator(m = 10, p = 0.5, obligateChiasma = False)
pop = skPop.fromPedPop(population=pop, chromLengths=chromLengths,crossoverSimulator=cS)
pop
A = pop.realFounderGeneContrMatrix().matrix
B = pop.realGeneContr(ID=pop.getFounderID(), IDb=pop.allID()).matrix.T

np.all(np.isclose(A,B))

np.sum(np.square(A - B))






pop[1].gametes[0].lineage
pop[1].gametes[1].lineage
pop[2].gametes[0].lineage
pop[2].gametes[1].lineage

pop[6].gametes[1].skeleton[0]


self._realGeneContr(ID=6, maxGenBack=7)


self._realGeneContr(ID=3, maxGenBack=1)


#ped.makeA(ID = ped.allID(), method = "LDL")['matrix']

#def test_init1():
#    with pytest.raises(ValueError):
#        simbreed.Pedigree(ID=[1, 2, 2], father=[None] * 3, mother=[None] * 3)
#
#
#def test_init2():
#    with pytest.raises(ValueError):
#        simbreed.Pedigree(ID=[None], father=[None], mother=[1])
#
#def test_founderInbreeding_Initialization():
#    with pytest.raises(ValueError):
#        simbreed.Pedigree(ID=[1, 2, 3],
#                          father=[None, None, 1],
#                          mother=[None, None, 2],
#                          founderInbreeding = {1: 0.5, 4:0.4})
#
#
#def test_sort():
#    ID = list(range(1, 16))
#    father = [4, 11, None, 3, 14, 5, 6, 2, None, 11, 3, None, None, None, 3]
#    mother = [12, 13, None, 9, 15, 10, 8, 1, None, 13, 9, None, None, None, 9]
#    IDsorted = [3, 9, 4, 11, 12, 13, 14, 15, 1, 2, 5, 10, 6, 8, 7]
#    ped = simbreed.Pedigree(ID, father, mother)
#    ped.sort()
#    assert ped.ID == IDsorted
#    
#
#ped.isExtended()
#import copy
#ped = Pedigree(ID, father, mother)
#p = copy.deepcopy(ped)
#p.sort()
#p
#
#
#
#
#### Pedigree with inbred founders
#founderInbreeding = dict.fromkeys([1,2], 1.0)
#ID = [1, 2, 3, 4, 5, 6]
#father = [None, None, 1, 1, 4, 5]
#mother = [None, None, 2, 1, 3, 2]
#ped1 = Pedigree(ID, father, mother, founderInbreeding = founderInbreeding)
## Pedigree with selfed founders
#ID =     [1,     2,   3, 4, 5, 6, 7, 8, 9,10, 11,12, 13, 14, 15, 16, 17, 18]
#father = [None, None, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 13, 16, 17]
#mother = [None, None, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 14]
#ped2 = Pedigree(ID, father, mother)
## tablular
#mT1 = ped1.IBD(ped1.ID)['matrix']
#mT2 = ped2.IBD(ped2.ID)['matrix'][np.ix_(range(12, 18), range(12, 18))]
#
#tmp = ped1.LDL()
#mD1 = tmp['L'] * np.diag(tmp['D']) * tmp['L'].T
#tmp = ped2.LDL()
#mD2 = (tmp['L'] * np.diag(tmp['D']) * tmp['L'].T)[np.ix_(range(12, 18), range(12, 18))]
#
#np.all(mT1 == mD1)
#np.all(mT2 == mD2)
#
#
#### Pedigree with doubled haploids
#doubledHaploid = [False, False, False, False, True, False, True, False, True, False, False, False]
#ID =      [1,    2,   3,    4, 5, 6, 7, 8, 9, 10, 11, 12]
#father = [None, None, None, 1, 4, 1, 6, 2, 8, 4, 4, 6]
#mother = [None, None, None, 2, 4, 3, 6, 3, 8, 6, 8, 8]
#ped3 = Pedigree(ID, father, mother, doubledHaploid = doubledHaploid)
##  artificial selfing
#ID = list(range(1, 25))
#father = [None, None, None, 1, 4, 5, 6, 7, 8, 1, 10, 11, 12, 13, 14, 2, 16, 17, 18, 19, 20, 9, 9, 15]
#mother = [None, None, None, 2, 4, 5, 6, 7, 8, 3, 10, 11, 12, 13, 14, 3, 16, 17, 18, 19, 20, 15, 21, 21]
#ped4 = Pedigree(ID, father, mother)
#
#
#ixtmp = [0, 1, 2, 3, 8, 9, 14, 15, 20, 21, 22, 23]
#
## tablular
#mT3 = ped3.IBD(ped3.ID)['matrix']
#mT4 = ped4.IBD(ped4.ID)['matrix'][np.ix_(ixtmp, ixtmp)]
#
#tmp = ped3.LDL()
#mD3 = tmp['L'] * np.diag(tmp['D']) * tmp['L'].T
#tmp = ped4.LDL()
#mD4 = (tmp['L'] * np.diag(tmp['D']) * tmp['L'].T)[np.ix_(ixtmp, ixtmp)]
#
#np.all(mT1 == mD1)
#np.all(mT2 == mD2)
#
#
#
#
#
#
#
#
#
#
#
#
#
#ID = [1, 2, 3, 4]
#father = [None, None, None, None]
#mother = [None, None, None, None]
#ped = Pedigree(ID, father, mother)
#ped.sort()
#for i in range(10):
#    ped.randomMating(size = 10)
#
#
##now = time.time()
#A = ped.makeA(ID = ped.getID(ped.lastGen()))
#D = ped.makeD(ID=ped.getID(ped.lastGen()))
#np.diag(A-D)
#ped.subset(ID = [191406326847878665613235748856562549633])
#
#
#ped.makeAinv(ID = ped.ID, method = 'LDL')
#
#np.allclose(A1, A2)
#
#time.time() - now
#
#np.diag(A)
#A.shape
#
##N = 100
##b = np.random.random_integers(-2000,2000, size=(N,N))
##M = (b + b.T)/2
#
#
#
#import timeit
#>>> setup = '''
#import numpy as np
#import scipy
#string = '\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xe4?\x00\x00\x00\x00\x00\x00\xe4?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xec?\x00\x00\x00\x00\x00\x00\xec?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xfe?\x00\x00\x00\x00\x00\x00\xfe?\x00\x00\x00\x00\x00\x00\xfe?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf1?\x00\x00\x00\x00\x00\x00\xf1?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xfe?\x00\x00\x00\x00\x00\x00\xff?\x00\x00\x00\x00\x00\x00\xff?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x80\xf1?\x00\x00\x00\x00\x00\x80\xf1?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xfe?\x00\x00\x00\x00\x00\x00\xff?\x00\x00\x00\x00\x00\x80\xff?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\xc0\xf1?\x00\x00\x00\x00\x00\xc0\xf1?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xe4?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xe4?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xec?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xec?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xfe?\x00\x00\x00\x00\x00\x00\xfe?\x00\x00\x00\x00\x00\x00\xfe?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf1?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf1?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xfe?\x00\x00\x00\x00\x00\x00\xff?\x00\x00\x00\x00\x00\x00\xff?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x80\xf1?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x80\xf1?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xfe?\x00\x00\x00\x00\x00\x00\xff?\x00\x00\x00\x00\x00\x80\xff?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\xc0\xf1?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\xc0\xf1?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xe4?\x00\x00\x00\x00\x00\x00\xe4?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xec?\x00\x00\x00\x00\x00\x00\xec?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xfe?\x00\x00\x00\x00\x00\x00\xfe?\x00\x00\x00\x00\x00\x00\xfe?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf1?\x00\x00\x00\x00\x00\x00\xf1?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xfe?\x00\x00\x00\x00\x00\x00\xff?\x00\x00\x00\x00\x00\x00\xff?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x80\xf1?\x00\x00\x00\x00\x00\x80\xf1?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf8?\x00\x00\x00\x00\x00\x00\xfc?\x00\x00\x00\x00\x00\x00\xfe?\x00\x00\x00\x00\x00\x00\xff?\x00\x00\x00\x00\x00\x80\xff?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\xc0\xf1?\x00\x00\x00\x00\x00\xc0\xf1?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xe4?\x00\x00\x00\x00\x00\x00\xec?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf1?\x00\x00\x00\x00\x00\x80\xf1?\x00\x00\x00\x00\x00\xc0\xf1?\x00\x00\x00\x00\x00\x00\xe4?\x00\x00\x00\x00\x00\x00\xec?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf1?\x00\x00\x00\x00\x00\x80\xf1?\x00\x00\x00\x00\x00\xc0\xf1?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xf2?\x00\x00\x00\x00\x00\xc0\xe5?\x00\x00\x00\x00\x00\xc0\xe5?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xe4?\x00\x00\x00\x00\x00\x00\xec?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf1?\x00\x00\x00\x00\x00\x80\xf1?\x00\x00\x00\x00\x00\xc0\xf1?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xe4?\x00\x00\x00\x00\x00\x00\xec?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf1?\x00\x00\x00\x00\x00\x80\xf1?\x00\x00\x00\x00\x00\xc0\xf1?\x00\x00\x00\x00\x00\xc0\xe5?\x00\x00\x00\x00\x00\x00\xf2?\x00\x00\x00\x00\x00\xc0\xe5?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xd0?\x00\x00\x00\x00\x00\x00\xe4?\x00\x00\x00\x00\x00\x00\xec?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf1?\x00\x00\x00\x00\x00\x80\xf1?\x00\x00\x00\x00\x00\xc0\xf1?\x00\x00\x00\x00\x00\x00\xe4?\x00\x00\x00\x00\x00\x00\xec?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf1?\x00\x00\x00\x00\x00\x80\xf1?\x00\x00\x00\x00\x00\xc0\xf1?\x00\x00\x00\x00\x00\xc0\xe5?\x00\x00\x00\x00\x00\xc0\xe5?\x00\x00\x00\x00\x00\x00\xf2?'
#A = np.fromstring(string)
#'''
#
#min(timeit.Timer("""
#n = A.shape[0]
#L = np.linalg.cholesky(A)
#Y = scipy.linalg.solve_triangular(L, np.eye(n), lower=True, check_finite=False)
#X = scipy.linalg.solve_triangular(L, Y, trans=1, lower=True, overwrite_b=True, check_finite=False)
#""", setup=setup).repeat(7, 1000))
#
#
#import time
#
#now = time.time()
#for i in range(1):
#    n = A.shape[0]
#    L = np.linalg.cholesky(A)
#    Y = scipy.linalg.solve_triangular(L, np.eye(n), lower=True, check_finite=False)
#    X = scipy.linalg.solve_triangular(L, Y, trans=1, lower=True, overwrite_b=True, check_finite=False)
#time.time() - now
#
#now = time.time()
#for i in range(1):
#    Ainv = np.linalg.inv(A)
#time.time() - now
#
#np.allclose(X * A, np.eye(n))
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
## tablular
#np.diagonal(ped3.IBD(ped3.ID)['matrix'])
#np.diagonal(ped4.IBD(ped4.ID)['matrix'])[np.ix_(tmp)]
## LDLt
#(1.0 + ped3.LDL()['F'])
#(1.0 + ped4.LDL()['F'])[np.ix_(tmp)]
#
#print(m1)
#np.diagonal(m1)
#np.diagonal(ped.IBD(ped.ID)['matrix'])
## artificial
#np.diagonal(ped.IBD(ped.ID)['matrix'])
#
#
#
#
#
#
#
#
#ID = [1, 2, 3, 4, 5, 6, 7, 8]
#father = [None, None, 1, ]
#mother = [None, None, 1, ]
#ped = Pedigree(ID, father, mother)
#1.0 + ped.LDL()['F']
#
#
#founderInbreeding = dict.fromkeys([1,2], 1.0)
#ID = [1, 2, 3, 4]
#
#
#
#np.diagonal(m2)
#
#
#self.IBD(ID = self.ID)
#self.LDL()
#
#
#
#ID = [1, 2, 3, 4, 5, 6, 7]
#father = [None, None, 1, 2, 3, 4, 6]
#mother = [None, None, 1, 2, 3, 4, 5]
#ped = Pedigree(ID, father, mother)
#np.diagonal(ped.IBD(ped.ID)['matrix'])

#Pedigree(ID=[None], father=[None], mother=[None])
#Pedigree(ID=[1,1], father=[None], mother=[None])
#Pedigree(ID=[1,2], father=[None], mother=[None])
#Pedigree(ID=[1], father=[None], mother=[None], generation=[0,1])
#Pedigree(ID=[1,2,3], father=[None, None, 1], mother=[None, None, 1],
#         doubledHaploid=[False, False, True])
#Pedigree(ID=[1], father=[None], mother=[None], founderInbreeding = {})
# 
#
## test extension
#ped = Pedigree(ID=[2, 3], father=[0, 1], mother=[1, 0])              
#ped.isExtended()
#ped.extend()
#ped
#
## test numInd
#ped = Pedigree(ID=[1, 2, 3], father=[None, None, 1], mother=[None, None, 2],
#               generation=[0, 0, 1])
#ped.numInd(1)
#ped.getDoubledHaploids(1)
#ped.getDetails(3)
#
#
#ped.isExtended()
##ped.extend()
#
#ped.isSorted()
#
#
#
#ped = Pedigree(ID=[1, 2, 3, 4], father=[None, None, 4, 2], mother=[None, None, 2, 2])
#ped.isSorted()
#ped.sort()
#
#
#
#ped = Pedigree(ID=[1, 2, 3], father=[None, None, 1], mother=[None, None, 2])
#
#getattr(ped, 'isSorted')

#def test_toDataFrame():
#    import pandas
##    with pytest.raises(ValueError):
#    ped = simbreed.Pedigree()
#    assert ped.toDataFrame().empty
#
#
#@pytest.fixture
#def pedigreeUnextended():
#    return simbreed.Pedigree(ID=[1, 2, 3],
#                             father=[4, 5, 6],
#                             mother=[7, 8, 9])
#
#
#def test_isExtended(pedigreeUnextended):
#    assert not pedigreeUnextended.isExtended()
#
#def test_extend(pedigreeUnextended):
#    pedigreeUnextended.extend()
#    assert pedigreeUnextended.isExtended()


#ped = Pedigree(ID=[1, 2, 3, 4, 5],
#                 father=[None, None, 1, 1, 3],
#                 mother=[None, None, 2, 3, 4])
#
#ped.getDetails(1)
#
#ped.isExtended()
#ped
#
#for attribute in unped.__dict__.values():
#    attribute = reorder(attribute, [0,1,2,3,4])
#
#unped.__dict__['ID'][0] = 99
#unped.reorder([1,2,3,4,5])
#
#
#
#ped.extend()
#ped.isExtended()
#ped
#
#ped.inferGenerations()
#ped.isSorted()
#ped.sort()


#@pytest.fixture
#def my_fixture():
#    return 5
#
#def test_whatever(my_fixture):
#    assert my_fixture == 5









